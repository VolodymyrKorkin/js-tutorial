// Цепочка ИЛИ (||) возвращает первое истинное значение или последнее, если такое значение не найдено.
// Например:
// alert( 1 || 0 ); // 1
// alert( true || 'no matter what' ); // true

// alert( null || 1 ); // 1 (первое истинное значение)
// alert( null || 0 || 1 ); // 1 (первое истинное значение)
// alert( undefined || null || 0 ); // 0 (поскольку все ложно, возвращается последнее значение)


// И (&&) возвращает первое ложное значение. Или последнее, если ничего не найдено.

// Вышеуказанные правила схожи с поведением ИЛИ. Разница в том, что И возвращает первое ложное значение, а ИЛИ –  первое истинное.
// Примеры:
// Если первый операнд истинный,
// "И" возвращает второй:
// alert( 1 && 0 ); // 0
// alert( 1 && 5 ); // 5

// Если первый операнд ложный,
// "И" возвращает его. Второй операнд игнорируется
// alert( null && 5 ); // null
// alert( 0 && "no matter what" ); // 0

// Можно передать несколько значений подряд. 
// В таком случае возвратится первое «ложное» значение, на котором остановились вычисления.
// alert( 1 && 2 && null && 3 ); // null

// Когда все значения верны, возвращается последнее
// alert( 1 && 2 && 3 ); // 3


// Приоритет оператора И && больше, чем ИЛИ ||, так что он выполняется раньше.

// Пример:
// let x = 1;
// (x > 0) && alert( 'Greater than zero!' ); // Greater than zero!
// Действие в правой части && выполнится только в том случае, если до него дойдут вычисления. 
// То есть, alert сработает, если в левой части (x > 0) будет true.

// Двойное НЕ !! используют для преобразования значений к логическому типу:
// alert( !!"non-empty string" ); // true
// alert( !!null ); // false

// Приоритет НЕ ! является наивысшим из всех логических операторов, 
// поэтому он всегда выполняется первым, перед && или ||.

/* Задание 2.11.1.-2.11.5 Что выведет alert?
Что выведет код ниже? */
//1. alert( null || 2 || undefined ); // 2

//2. alert( alert(1) || 2 || alert(3) ); // 1, потом 2
/*Вызов alert не возвращает значения, или, иначе говоря, возвращает undefined.
Первый оператор ИЛИ || выполнит первый alert(1).
Получит undefined и пойдёт дальше, ко второму операнду в поисках истинного значения.
Так как второй операнд 2 является истинным, то вычисления завершатся. */

//3. alert( 1 && null && 2 ); // null

//4. alert( alert(1) && alert(2) ); // 1 undefined

//5. alert( null || 2 && 3 || 4 ); // 3





