// 1. Функция в JavaScript – значение особого типа.

// Function Declaration (Объявление Функции):
// function sayHi() {
//     alert( "Привет" );
//   }

// Function Expression (Функциональное Выражение).
// let sayHi = function() {
//     alert( "Привет" );
//   };

// Смысл обоих примеров кода одинаков: "создать функцию и поместить её значение в переменную sayHi".

// function sayHi() {
//     alert( "Привет" );
// }
// alert( sayHi ); //  выведет строковое представление функции, которое является её исходным кодом.

// Обратите внимание, что последняя строка не вызывает функцию sayHi, 
// после её имени нет круглых скобок.

// Мы можем скопировать функцию в другую переменную:

// function sayHi() {   // (1) создаём
//   alert( "Привет" );  }  
// let func = sayHi;    // (2) копируем  
// func(); // Привет    // (3) вызываем копию (работает)!
// sayHi(); // Привет   //     прежняя тоже работает (почему бы нет)

// (1) Объявление Function Declaration создало функцию и 
// присвоило её значение переменной с именем sayHi.

// (2) В строке (2) мы скопировали её значение в переменную func. 
// Обратите внимание (ещё раз): нет круглых скобок после sayHi. 
// Если бы они были, то выражение func = sayHi() записало бы !РЕЗУЛЬТАТ вызова sayHi() в переменную func, 
// а не саму !ФУНКЦИЮ sayHi.

// (3) Теперь функция может быть вызвана с помощью обеих переменных sayHi() и func().

// Заметим, что мы могли бы использовать и Function Expression для того, чтобы создать sayHi 
// в первой строке - результат был бы таким же:
// let sayHi = function() {
//   alert( "Привет" );
// };
// let func = sayHi;
// // ...

// 2. Функции-«колбэки»

// Давайте напишем функцию ask(question, yes, no) с тремя параметрами:
// question
// Текст вопроса

// yes
// Функция, которая будет вызываться, если ответ будет «Yes»

// no
// Функция, которая будет вызываться, если ответ будет «No»

// Наша функция должна задать вопрос question и, в зависимости от того, 
// как ответит пользователь, вызвать yes() или no():

// function ask(question, yes, no) {
//   if (confirm(question)) yes()
//   else no();
// }
// function showOk() {
//   alert( "Вы согласны." );
// }
// function showCancel() {
//   alert( "Вы отменили выполнение." );
// }
// 
// использование: функции showOk, showCancel передаются в качестве аргументов ask
// ask("Вы согласны?", showOk, showCancel);

// Аргументы функции ask ещё называют функциями-колбэками или просто колбэками.

// В нашем случае, showOk становится колбэком’ для ответа «yes»
// showCancel – для ответа «no».

// Мы можем переписать этот пример значительно короче, используя Function Expression:

// function ask(question, yes, no) {
//   if (confirm(question)) yes()
//   else no();
// }
// ask(
//   "Вы согласны?",
//   function() { alert("Вы согласились."); },
//   function() { alert("Вы отменили выполнение."); }
// );

// Здесь функции объявляются прямо внутри вызова ask(...). 
// У них нет имён, поэтому они называются АНОНИМНЫМИ. 
// Такие функции недоступны снаружи ask (потому что они не присвоены переменным), 
// но это как раз то, что нам нужно.

// Обычные значения, такие как строки или числа представляют собой ДАННЫЕ.
// Функции, с другой стороны, можно воспринимать как «ДЕЙСТВИЯ».
// Мы можем передавать их из переменной в переменную и запускать, когда захотим.

// 3. Function Expression в сравнении с Function Declaration

// 3.1 Синтаксис

// Function Declaration: функция объявляется отдельной конструкцией «function…» в основном потоке кода.

// Function Declaration
// function sum(a, b) {
//   return a + b;
// }

// Function Expression: функция, созданная внутри другого выражения или синтаксической конструкции. 
// В данном случае функция создаётся в правой части «выражения присваивания» =:

// Function Expression
// let sum = function(a, b) {
//   return a + b;
// };

// 3.2 Время создания функции

// Function Declaration создается движком при инициализации выполнения скрипта, 
// можно использовать во всем скрипте (или блоке кода, если функция объявлена в блоке).

// В строгом режиме, когда Function Declaration находится в блоке {...}, 
// функция доступна везде внутри блока. Но не снаружи него.

// Function Expression создаётся, когда выполнение доходит до него, и затем уже может использоваться.

// Пример
// let age = 16; // присвоим для примера 16
// if (age < 18) {
//   welcome();               // \   (выполнится)
//                            //  |
//   function welcome() {     //  |
//     alert("Привет!");      //  |  Function Declaration доступно
//   }                        //  |  во всём блоке кода, в котором объявлено
//                            //  |
//   welcome();               // /   (выполнится)
// } else {
//   function welcome() {
//     alert("Здравствуйте!");
//   }
// } // здесь фигурная скобка закрывается,
//   // поэтому Function Declaration, созданные внутри блока кода выше -- недоступны отсюда.
// welcome(); // Ошибка: welcome is not defined

// Что можно сделать, чтобы welcome была видима снаружи if?

// пример  Function Expression,
// let age = prompt("Сколько Вам лет?", 18);
// let welcome;
// if (age < 18) {
//   welcome = function() {
//     alert("Привет!");
//   };
// } else {
// 
//   welcome = function() {
//     alert("Здравствуйте!");
//   };
// }
// welcome(); // теперь всё в порядке

// Можно упростить этот код ещё сильнее, используя условный оператор ?:
// let age = prompt("Сколько Вам лет?", 18);
// 
// let welcome = (age < 18) ?
//   function() { alert("Привет!"); } :
//   function() { alert("Здравствуйте!"); };
// welcome(); // теперь всё в порядке

// 4. Итого
// Функции – это значения. Они могут быть присвоены, скопированы или объявлены в любом месте кода.
// Если функция объявлена как отдельная инструкция в основном потоке кода, то это Function Declaration.
// Если функция была создана как часть выражения, то считается, что эта функция объявлена при помощи Function Expression.
// Function Declaration обрабатываются перед выполнением блока кода. Они видны во всём блоке.
// Функции, объявленные при помощи Function Expression, создаются, только когда поток выполнения достигает их.