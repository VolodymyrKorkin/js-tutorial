// function showMessage() {
//     alert( 'Всем привет!' );
//   }
//   
//   showMessage();
//   showMessage();

// Вначале идёт ключевое слово function, после него имя функции, 
// затем список параметров в круглых скобках через запятую (в вышеприведённом примере он пустой) 
// и, наконец, код функции, также называемый «телом функции», внутри фигурных скобок.

// 2. Локальные переменные

// Переменные, объявленные внутри функции, видны только внутри этой функции.
// function showMessage() {
//     let message = "Привет, я JavaScript!"; // локальная переменная
//     alert( message );
//   }
//   showMessage(); // Привет, я JavaScript!
//   alert( message ); // <-- будет ошибка, т.к. переменная видна только внутри функции

// 3. Внешние переменные

// У функции есть доступ к внешним переменным, например:
// let userName = 'Вася';
// 
// function showMessage() {
//   let message = 'Привет, ' + userName;
//   alert(message);
// }
// showMessage(); // Привет, Вася

// Функция обладает полным доступом к внешним переменным и может изменять их значение.
// let userName = 'Вася';
// 
// function showMessage() {
//   userName = "Петя"; // (1) изменяем значение внешней переменной
// 
//   let message = 'Привет, ' + userName;
//   alert(message);
// }
// 
// alert( userName ); // Вася перед вызовом функции
// 
// showMessage();
// 
// alert( userName ); // Петя, значение внешней переменной было изменено функцией

// Внешняя переменная используется, только если внутри функции нет такой локальной.
// Если одноимённая переменная объявляется внутри функции, тогда она перекрывает внешнюю. 
// Например, в коде ниже функция использует локальную переменную userName. Внешняя будет проигнорирована:
// let userName = 'Вася';
// 
// function showMessage() {
//   let userName = "Петя"; // объявляем локальную переменную
// 
//   let message = 'Привет, ' + userName; // Петя
//   alert(message);
// }
// 
// // функция создаст и будет использовать свою собственную локальную переменную userName
// showMessage();
// 
// alert( userName ); // Вася, не изменилась, функция не трогала внешнюю переменную

// 4. Глобальные переменные
// Переменные, объявленные снаружи всех функций, такие как внешняя переменная userName 
// в вышеприведённом коде – называются глобальными.

// Глобальные переменные видимы для любой функции 
// (если только их не перекрывают одноимённые локальные переменные).

// Желательно сводить использование глобальных переменных к минимуму. 
// В современном коде обычно мало или совсем нет глобальных переменных. 
// Хотя они иногда полезны для хранения важнейших «общепроектовых» данных.

// 5. Параметры

// Мы можем передать внутрь функции любую информацию, используя параметры 
// (также называемые аргументами функции).

// В нижеприведённом примере функции передаются два параметра: from и text.
// function showMessage(from, text) { // аргументы: from, text
//     alert(from + ': ' + text);
//   }
//   
//   showMessage('Аня', 'Привет!'); // Аня: Привет! (*)
//   showMessage('Аня', "Как дела?"); // Аня: Как дела? (**)

// Пример: у нас есть переменная from, и мы передаём её функции. 
// Обратите внимание: функция изменяет значение from, но это изменение 
// не видно снаружи. Функция всегда получает только КОПИЮ значения:
// function showMessage(from, text) {

//     from = '*' + from + '*'; // немного украсим "from"  
//     alert( from + ': ' + text );
//   }  
//   let from = "Аня";
  
//   showMessage(from, "Привет"); // *Аня*: Привет
  
//   // значение "from" осталось прежним, функция изменила значение локальной переменной
//   alert( from ); // Аня

// 6. Параметры по умолчанию

// Если параметр не указан, то его значением становится undefined.

// Например, вышеупомянутая функция showMessage(from, text) 
// может быть вызвана с одним аргументом:
// showMessage("Аня");

// Это не приведёт к ошибке. 
// Такой вызов выведет "Аня: undefined". В вызове не указан параметр text, 
// поэтому предполагается, что text === undefined.

// Если мы хотим задать параметру text значение по умолчанию, 
// мы должны указать его после =
// function showMessage(from, text = "текст не добавлен") {
//     alert( from + ": " + text );
//   }  
//   showMessage("Аня"); // Аня: текст не добавлен

// В данном случае "текст не добавлен" это строка, но на её месте могло бы быть
// и более сложное выражение, которое бы вычислялось 
// и присваивалось при отсутствии параметра. Например:

// function showMessage(from, text = anotherFunction()) {
//     // anotherFunction() выполнится только если не передан text
//     // результатом будет значение text
//   }

// Вычисление параметров по умолчанию

// В JavaScript параметры по умолчанию вычисляются каждый раз, 
// когда функция вызывается без соответствующего параметра.

// В примере выше anotherFunction() будет вызываться каждый раз, 
// когда showMessage() вызывается без параметра text.

// 7. Возврат значения

// Функция может вернуть результат, который будет передан в вызвавший её код.

// function sum(a, b) {
//     return a + b;
//   }  
//   let result = sum(1, 2);
//   alert( result ); // 3

// Директива return может находиться в любом месте тела функции. 
// Как только выполнение доходит до этого места, функция останавливается, 
// и значение возвращается в вызвавший её код (присваивается переменной result выше).

// Вызовов return может быть несколько, например:
// function checkAge(age) {
//   if (age > 18) {
//       return true;
//   } else {
//       return confirm('А родители разрешили?');
//   }
// }  
// let age = prompt('Сколько вам лет?', 18);

// if ( checkAge(age) ) {
//   alert( 'Доступ получен' );
// } else {
//   alert( 'Доступ закрыт' );
// }

// Возможно использовать return и без значения. 
// Это приведёт к немедленному выходу из функции.
// function showMovie(age) {
//   if ( !checkAge(age) ) {
//     return;
//   }

//   alert( "Вам показывается кино" ); // (*)
//   // ...
// }
// В коде выше, если checkAge(age) вернёт false, showMovie не выполнит alert.

// Результат функции с пустым return или без него – undefined

// Если функция не возвращает значения, это всё равно, 
// как если бы она возвращала undefined:

// function doNothing() { /* пусто */ }
// alert( doNothing() === undefined ); // true

// Пустой return аналогичен return undefined:

// function doNothing() {
//   return;
// }
// alert( doNothing() === undefined ); // true

// !!! Никогда не добавляйте перевод строки между return и его значением

// Если мы хотим, чтобы возвращаемое выражение занимало несколько строк, 
// нужно начать его на той же строке, что и return. Или, хотя бы, 
// поставить там открывающую скобку, вот так:
// return (
//   some + long + expression
//   + or +
//   whatever * f(a) + f(b)
//   )

// 8. Выбор имени функции

// Функция – это действие. Поэтому имя функции обычно является глаголом.

// Одна функция – одно действие

// Функция должна делать только то, что явно подразумевается её названием. 
// И это должно быть одним действием.

// 9. Функции == Комментарии

// Первый вариант использует метку nextPrime:
// function showPrimes(n) {
//   nextPrime: for (let i = 2; i < n; i++) {
// 
//     for (let j = 2; j < i; j++) {
//       if (i % j == 0) continue nextPrime;
//     }
// 
//     alert( i ); // простое
//   }
// }

// Второй вариант использует дополнительную функцию isPrime(n) для проверки на простое:
// function showPrimes(n) {
// 
//   for (let i = 2; i < n; i++) {
//     if (!isPrime(i)) continue;
// 
//     alert(i);  // простое
//   }
// }
// 
// function isPrime(n) {
//   for (let i = 2; i < n; i++) {
//     if ( n % i == 0) return false;
//   }
//   return true;
// }

/* Задание 2.15.1. Обязателен ли "else"?
Следующая функция возвращает true, если параметр age больше 18.
В ином случае она запрашивает подтверждение через confirm и возвращает его результат: */
// function checkAge(age) {
//   if (age > 18) {
//     return true;
//   } else {
//     // ...
//     return confirm('Родители разрешили?');
//   }
// }
// Будет ли эта функция работать как-то иначе, если убрать else?
// function checkAge(age) {
//   if (age > 18) {
//     return true;
//   }
//   // ...
//   return confirm('Родители разрешили?');
// }
// Есть ли хоть одно отличие в поведении этого варианта? // отличий нет

/* Задание 2.15.2. Перепишите функцию, используя оператор '?' или '||'
Следующая функция возвращает true, если параметр age больше 18.
В ином случае она задаёт вопрос confirm и возвращает его результат. */
// function checkAge(age) {
//   if (age > 18) {
//     return true;
//   } else {
//     return confirm('Родители разрешили?');
//   }
// }
// Перепишите функцию, чтобы она делала то же самое, но без if, в одну строку.
// Сделайте два варианта функции checkAge:
// 1. Используя оператор ?
// function checkAge(age) {  
//   return (age > 18) ? true : confirm('Родители разрешили?'); }

// 2. Используя оператор ||
// function checkAge(age) {  
//   return (age > 18) || confirm('Родители разрешили?'); }

/* Задание 2.15.3. Функция min(a, b)
Напишите функцию min(a,b), которая возвращает меньшее из чисел a и b. */
// function minNumber(a, b) {
//   return (a > b) ? a : b;
// }

/* Задание 2.15.4. Функция pow(x,n)
Напишите функцию pow(x,n), которая возвращает x в степени n. 
Иначе говоря, умножает x на себя n раз и возвращает результат.
Создайте страницу, которая запрашивает x и n, а затем выводит результат pow(x,n). */
// function pow(x, n) {
//   if (n >= 1) {
//     return (x ** n);
//   }
//   return alert('Введите число степени 1 или больше');
// }
// let a = prompt('Введите число, которое будем возводить в степень', '');
// let b = prompt('Введите cтепень, в которую будем возводить число', '');

// alert( pow(a, b) );