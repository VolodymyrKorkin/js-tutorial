// 1. Фигурные скобки
// Так называемый «египетский» стиль с открывающей скобкой на той же строке, 
// что и соответствующее ключевое слово – не на новой строке. 
// Перед открывающей скобкой должен быть пробел, как здесь:
// if (condition) {
// делай это
// }

// Если однострочная запись
// В одну строку без скобок – приемлемо, если эта строка короткая:
// if (n < 0) alert(`Степень ${n} не поддерживается`);

// Самый лучший вариант:
// if (n < 0) {
//   alert(`Степень ${n} не поддерживается`);
// }

// 2. Длина строки
// Максимальную длину строки согласовывают в команде. Обычно это 80 или 120 символов.

// 3. Отступы
// 3.1 Горизонтальные отступы: два или четыре пробела.(чаще 2)

// 3.2 Вертикальные отступы: пустые строки для разбивки кода на «логические блоки».
// Даже одну функцию часто можно разделить на логические блоки. 
// В примере ниже разделены инициализация переменных, основной цикл и возвращаемый результат:
// function pow(x, n) {
//   let result = 1;
//   //              <--
//   for (let i = 0; i < n; i++) {
//     result *= x;
//   }
//   //              <--
//   return result;
// }

// 4. Точка с запятой
// Точки с запятой должны присутствовать после каждого выражения, 
// даже если их, казалось бы, можно пропустить.

// 5. Уровни вложенности
// Уровней вложенности должно быть немного.
// Например, в цикле бывает полезно использовать директиву continue, чтобы избежать лишней вложенности.
// Вместо
// for (let i = 0; i < 10; i++) {
//   if (cond) {
//     ... // <- ещё один уровень вложенности
//   }
// }

// Мы можем написать:
// for (let i = 0; i < 10; i++) {
//   if (!cond) continue;
//   ...  // <- нет лишнего уровня вложенности
// }

// Аналогичная ситуация – с if/else и return.

// Например, две нижеследующие конструкции идентичны.
// Первая:
// function pow(x, n) {
//   if (n < 0) {
//     alert("Отрицательные значения 'n' не поддерживаются");
//   } else {
//     let result = 1;
// 
//     for (let i = 0; i < n; i++) {
//       result *= x;
//     }
// 
//     return result;
//   }
// }

// Вторая:
// function pow(x, n) {
//   if (n < 0) {
//     alert("Отрицательные значения 'n' не поддерживаются");
//     return;
//   }
// 
//   let result = 1;
// 
//   for (let i = 0; i < n; i++) {
//     result *= x;
//   }
// 
//   return result;
// }

// Второй вариант является более читабельным, потому что «особый случай» n < 0 
// обрабатывается на ранней стадии.

// 6. Размещение функций

// Если вы пишете несколько вспомогательных функций, а затем используемый ими код, 
// то существует три способа организации функций.

// 6.1 Объявить функции перед кодом, который их вызовет:

// объявление функций
// function createElement() {
//   ...
// }

// function setHandler(elem) {
//   ...
// }

// function walkAround() {
//   ...
// }

// // код, который использует их
// let elem = createElement();
// setHandler(elem);
// walkAround();

// 6.2 Сначала код, затем функции

// код, использующий функции
// let elem = createElement();
// setHandler(elem);
// walkAround();

// --- вспомогательные функции ---
// function createElement() {
//   ...
// }

// function setHandler(elem) {
//   ...
// }

// function walkAround() {
//   ...
// }

// 6.3 Смешанный стиль: функция объявляется там, где она используется впервые.

// !!! В большинстве случаев второй вариант (сначала код, затем функция) является предпочтительным.

// Это потому, что при чтении кода мы сначала хотим знать, что он делает. 
// Если сначала идёт код, то это тут же становится понятно. 
// И тогда, может быть, нам вообще не нужно будет читать функции, особенно если их имена хорошо подобраны.

/* Задание 3.2. Плохой стиль
Какие недостатки вы видите в стиле написания кода этого примера? */

// function pow(x,n) // пробел после запятой
// { // фигурная скобка на той же строке, что и функция
//   let result=1; // строка отступа между let и for. Отступы между операторами
//   for(let i=0;i<n;i++) {result*=x;} // отступы между операторами, убрать фигурные скобки
//   return result;
// }

// let x=prompt("x?",''), n=prompt("n?",'') // let n с новой строки, отступы между операторами, добавить точку с запятой
// if (n<=0) // отступы между операторами, фигурная скобка на этой же строке
// {
//   alert(`Степень ${n} не поддерживается, введите целую степень, большую 0`);
// }
// else // на строку выше, там где фигурная скобка, 
// { // на строку с елсе
//   alert(pow(x,n))  // пробелы между скобками алерт, пробел после запятой. точка с запятой
// }

// Исправленный вариант
// function pow(x, n) {
//   let result = 1;

//   for (let i = 0; i < n; i++) {
//     result *= x;
//   }

//   return result;
// }

// let x = prompt("x?", "");
// let n = prompt("n?", "");

// if (n < 0) {
//   alert(`Степень ${n} не поддерживается,
//     введите целую степень, большую 0`);
// } else {
//   alert( pow(x, n) );
// }