// Автоматическое тестирование означает, что тесты пишутся отдельно, в дополнение к коду. 
// Они по-разному запускают наши функции и сравнивают результат с ожидаемым.

// Behavior Driven Development (BDD)

// BDD – это три в одном: и тесты, и документация, и примеры использования.

// 1. Разработка функции возведения в степень — «pow»: спецификация

// Перед тем, как начать писать код функции pow, мы можем представить себе, что она должна делать, и описать её.
// Такое описание называется спецификацией (specification). 
// Она содержит описания различных способов использования и тесты для них, например:

// describe("pow", function() {
// 
//     it("возводит в степень n", function() {
//       assert.equal(pow(2, 3), 8);
//     });
//   
//   });

// Спецификация состоит из трёх основных блоков:

// - describe("заголовок", function() { ... })
// Какую функциональность мы описываем. В нашем случае мы описываем функцию pow. 
// Используется для группировки рабочих лошадок – блоков it.

// - it("описание", function() { ... })
// В первом аргументе блока it мы ЧЕЛОВЕЧЕСКИМ языком описываем конкретный способ использования функции, а 
// во втором – пишем функцию, которая тестирует данный случай.

// - assert.equal(value1, value2)
// Код внутри блока it, если функция работает верно, должен выполняться без ошибок.

// Функции вида assert.* используются для проверки того, что функция pow работает так, как мы ожидаем. 
// В этом примере мы используем одну из них – assert.equal, 
// которая сравнивает переданные значения и выбрасывает ошибку, если они не равны друг другу. 

// Существуют и другие типы сравнений и проверок, которые мы добавим позже.

// Спецификация может быть запущена, и при этом будет выполнена проверка, 
// указанная в блоке it, мы увидим это позднее.

// 2. Процесс разработки

// Процесс разработки обычно выглядит следующим образом:
// 2.1 Пишется начальная спецификация с тестами, проверяющими основную функциональность.
// 2.2 Создаётся начальная реализация.
// 2.3 Для запуска тестов мы используем фреймворк Mocha (подробнее о нём чуть позже). 
//     Пока функция не готова, будут ошибки. Вносим изменения до тех пор, пока всё не начнёт работать так, как нам нужно.
// 2.4 Теперь у нас есть правильно работающая начальная реализация и тесты.
// 2.5 Мы добавляем новые способы использования в спецификацию, возможно, ещё не реализованные в тестируемом коде. 
//     Тесты начинают «падать» (выдавать ошибки).
// 2.6 Возвращаемся на шаг 3, дописываем реализацию до тех пор, пока тесты не начнут завершаться без ошибок.
// 2.7 Повторяем шаги 3-6, пока требуемая функциональность не будет готова.

// Таким образом, разработка проходит итеративно. 
// Мы пишем спецификацию, реализуем её, проверяем, что тесты выполняются без ошибок, 
// пишем ещё тесты, снова проверяем, что они проходят и т.д.
